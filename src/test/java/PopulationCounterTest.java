/*
 * This Java source file was generated by the Gradle 'init' task.
 */

// import static org.junit.Assert.assertEquals;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.mockito.Mockito.when;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import com.google.errorprone.annotations.DoNotMock;






public class PopulationCounterTest {
 
    @Test
    public void testSomeLibraryMethod() throws Exception {

        // Setup
        String expected = "World population is: 1,347,982,728\n";

        // https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);

        // Exercise
        PopulationCounter.main(new String[] {"./data/worldcitiespop.csv"});

        // Assert
        System.out.flush();
        String output = baos.toString();
        assertEquals(expected, output );

        // Teardown
        System.setOut(old);
    }


// ad,aixas,Aixï¿½s,06,,42.4833333,1.4666667

    // our data is not null.
    @Test
    public void testReadFile() throws IOException{

        ReadFile readFile = new ReadFile(); 
        List<String> myList = readFile.getLines("./data/worldcitiespop.csv");

        assertNotEquals(null, myList);
    }


    // parsing the data 
    @Test
    public void testParseData() throws IOException{

        ReadFile readFile = new ReadFile(); 
        List<String> lines =  readFile.getLines("./data/worldcitiespop.csv");
        ParseData myParseData = new ParseData();
        List<String> parsedData = myParseData.parseMyData(lines);

         // Assert
         assertEquals(1586977, parsedData.size());
            // assertEquals(2043, 2043);



    }

    @Mock  SumPopulation sumPopulation;
    @Mock ParseData parseData;
    @Mock ReadFile readFile;


    // @Test
    // List<String> myList = new ArrayList<String>() ;

    // public List<String> MockTestReadFile() throws IOException{
    //     when(readFile.getLines("file_path")).thenReturn(myList);
    // }







}
